@model ExpenseTracker.WebUI.Models.Transaction.AddModel
@{
    Layout = "~/Views/Shared/_AuthorizedLayout.cshtml";
    ViewBag.Title = "Yeni İşlem Girişi";
}

@Styles.Render("~/Content/pickadatejs")

<style>
    #radioBtn .notActive {
        color: #3276b1;
        background-color: #fff;
    }

    .cusradiobtn {
        cursor: pointer;
        width: 50%;
    }
</style>

<div class="row">
    <div class="col-md-8 mx-auto">
        <h4 class="mb-3">Yeni İşlem</h4>
        @using (Html.BeginForm("Add", "Transaction", FormMethod.Post, new { @class = "needs-validation" }))
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="row">
                <div class="col-sm-12">
                    <div class="input-group">
                        <div id="radioBtn" class="btn-group">
                            <a class="btn btn-primary btn-sm active cusradiobtn" data-toggle="IsIncome" data-title="false">Gider</a>
                            <a class="btn btn-primary btn-sm notActive cusradiobtn" data-toggle="IsIncome" data-title="true">Gelir</a>
                        </div>
                        @Html.HiddenFor(m => m.IsIncome)
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-3 mb-3">
                    @Html.LabelFor(model => model.Amount)
                    @Html.EditorFor(model => model.Amount, new { htmlAttributes = new { @type = "number", @min = "0", @step = "0.01", @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-6 mb-3">
                    @Html.LabelFor(model => model.CategoryId)
                    @Html.DropDownListFor(model => model.CategoryId, Model.CategoryList, htmlAttributes: new { @class = "custom-select d-block w-100" })
                    @Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-3 mb-3">
                    @Html.LabelFor(model => model.Date)
                    @Html.EditorFor(model => model.Date, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="row">
                <div class="col-md-6 mb-3">
                    @Html.LabelFor(model => model.AccountId)
                    @Html.DropDownListFor(model => model.AccountId, Model.AccountList, htmlAttributes: new { @class = "custom-select d-block w-100" })
                    @Html.ValidationMessageFor(model => model.AccountId, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-6 mb-3">
                    @Html.LabelFor(model => model.Description)
                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>

            <button class="btn btn-primary btn-lg btn-block" type="submit">İşlemi Kaydet</button>
        }
    </div>
</div>

<hr class="mb-4">

@Html.Partial("_List", Model.TransactionSummaries)

@section scripts {
    @Scripts.Render("~/bundles/pickadate_dateonly")
    @*<script src="~/tpComponents/pickadatejs/translations/tr_TR.js"></script>*@

    <script>
        $(function () {
            //https://amsul.ca/pickadate.js/date/
            $("#Date").pickadate({
                format: 'd mmmm, yyyy',
                formatSubmit: 'yyyy-MM-dd',
                onStart: function () {
                    var date = new Date();
                    this.set('select', [date.getFullYear(), date.getMonth(), date.getDate()]);
                },
            });

            $('#radioBtn a').on('click', function () {
                var sel = $(this).data('title');
                var tog = $(this).data('toggle');
                $('#' + tog).prop('value', sel);

                $('a[data-toggle="' + tog + '"]').not('[data-title="' + sel + '"]').removeClass('active').addClass('notActive');
                $('a[data-toggle="' + tog + '"][data-title="' + sel + '"]').removeClass('notActive').addClass('active');
            });
        });
    </script>

    @Scripts.Render("~/bundles/bootgrid")

    <script>
        $("#transaction-list-grid").bootgrid(
            {
                formatters: {
                    "commands": function (column, row) {
                        return "<a href=\"/Transaction/Edit/" + row.id + "\" class=\"btn btn-xs btn-default command-edit\" data-row-id=\"" + row.id + "\"><span class=\"fa fa-pencil\"></span></a> " +
                            "<a href=\"/Transaction/Delete/" + row.id + "\" class=\"btn btn-xs btn-default command-delete\" data-row-id=\"" + row.id + "\"><span class=\"fa fa-trash-o\"></span></a>";
                    }
                }
            }
        );
    </script>
}
