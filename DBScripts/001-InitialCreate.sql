DECLARE @CurrentMigration [nvarchar](max)

IF object_id('[dbo].[__MigrationHistory]') IS NOT NULL
    SELECT @CurrentMigration =
        (SELECT TOP (1) 
        [Project1].[MigrationId] AS [MigrationId]
        FROM ( SELECT 
        [Extent1].[MigrationId] AS [MigrationId]
        FROM [dbo].[__MigrationHistory] AS [Extent1]
        WHERE [Extent1].[ContextKey] = N'ExpenseTracker.Persistence.Context.ExpenseTrackerContext'
        )  AS [Project1]
        ORDER BY [Project1].[MigrationId] DESC)

IF @CurrentMigration IS NULL
    SET @CurrentMigration = '0'

IF @CurrentMigration < '201905202050246_InitialCreate'
BEGIN
    CREATE TABLE [dbo].[Accounts] (
        [AccountId] [int] NOT NULL IDENTITY,
        [Name] [nvarchar](max) NOT NULL,
        [StartingBalance] [decimal](18, 2) NOT NULL,
        [CurrentBalance] [decimal](18, 2) NOT NULL,
        [AccountTypeId] [int] NOT NULL,
        [BudgetId] [int] NOT NULL,
        [InsertUserId] [nvarchar](128) NOT NULL,
        [InsertTime] [datetime] NOT NULL,
        [UpdateUserId] [nvarchar](128),
        [UpdateTime] [datetime],
        [IsActive] [bit] NOT NULL,
        CONSTRAINT [PK_dbo.Accounts] PRIMARY KEY ([AccountId])
    )
    CREATE INDEX [IX_AccountTypeId] ON [dbo].[Accounts]([AccountTypeId])
    CREATE INDEX [IX_BudgetId] ON [dbo].[Accounts]([BudgetId])
    CREATE INDEX [IX_InsertUserId] ON [dbo].[Accounts]([InsertUserId])
    CREATE INDEX [IX_UpdateUserId] ON [dbo].[Accounts]([UpdateUserId])
    CREATE TABLE [dbo].[AccountTypes] (
        [AccountTypeId] [int] NOT NULL,
        [Name] [nvarchar](max) NOT NULL,
        [IsActive] [bit] NOT NULL,
        CONSTRAINT [PK_dbo.AccountTypes] PRIMARY KEY ([AccountTypeId])
    )
    CREATE TABLE [dbo].[Budgets] (
        [BudgetId] [int] NOT NULL IDENTITY,
        [Name] [nvarchar](max) NOT NULL,
        [CurrencyId] [int] NOT NULL,
        [InsertUserId] [nvarchar](128) NOT NULL,
        [InsertTime] [datetime] NOT NULL,
        [UpdateUserId] [nvarchar](128),
        [UpdateTime] [datetime],
        [IsActive] [bit] NOT NULL,
        CONSTRAINT [PK_dbo.Budgets] PRIMARY KEY ([BudgetId])
    )
    CREATE INDEX [IX_CurrencyId] ON [dbo].[Budgets]([CurrencyId])
    CREATE INDEX [IX_InsertUserId] ON [dbo].[Budgets]([InsertUserId])
    CREATE INDEX [IX_UpdateUserId] ON [dbo].[Budgets]([UpdateUserId])
    CREATE TABLE [dbo].[BudgetPlans] (
        [BudgetPlanId] [int] NOT NULL IDENTITY,
        [Month] [int] NOT NULL,
        [Year] [int] NOT NULL,
        [BudgetId] [int] NOT NULL,
        [InsertUserId] [nvarchar](128) NOT NULL,
        [InsertTime] [datetime] NOT NULL,
        [UpdateUserId] [nvarchar](128),
        [UpdateTime] [datetime],
        [IsActive] [bit] NOT NULL,
        CONSTRAINT [PK_dbo.BudgetPlans] PRIMARY KEY ([BudgetPlanId])
    )
    CREATE INDEX [IX_BudgetId] ON [dbo].[BudgetPlans]([BudgetId])
    CREATE INDEX [IX_InsertUserId] ON [dbo].[BudgetPlans]([InsertUserId])
    CREATE INDEX [IX_UpdateUserId] ON [dbo].[BudgetPlans]([UpdateUserId])
    CREATE TABLE [dbo].[BudgetPlanCategories] (
        [BudgetPlanCategoryId] [int] NOT NULL IDENTITY,
        [PlannedAmount] [decimal](18, 2) NOT NULL,
        [BudgetPlanId] [int] NOT NULL,
        [CategoryId] [int] NOT NULL,
        [InsertUserId] [nvarchar](128) NOT NULL,
        [InsertTime] [datetime] NOT NULL,
        [UpdateUserId] [nvarchar](128),
        [UpdateTime] [datetime],
        [IsActive] [bit] NOT NULL,
        CONSTRAINT [PK_dbo.BudgetPlanCategories] PRIMARY KEY ([BudgetPlanCategoryId])
    )
    CREATE INDEX [IX_BudgetPlanId] ON [dbo].[BudgetPlanCategories]([BudgetPlanId])
    CREATE INDEX [IX_CategoryId] ON [dbo].[BudgetPlanCategories]([CategoryId])
    CREATE INDEX [IX_InsertUserId] ON [dbo].[BudgetPlanCategories]([InsertUserId])
    CREATE INDEX [IX_UpdateUserId] ON [dbo].[BudgetPlanCategories]([UpdateUserId])
    CREATE TABLE [dbo].[Categories] (
        [CategoryId] [int] NOT NULL IDENTITY,
        [Name] [nvarchar](max) NOT NULL,
        [BudgetId] [int] NOT NULL,
        [InsertUserId] [nvarchar](128) NOT NULL,
        [InsertTime] [datetime] NOT NULL,
        [UpdateUserId] [nvarchar](128),
        [UpdateTime] [datetime],
        [IsActive] [bit] NOT NULL,
        CONSTRAINT [PK_dbo.Categories] PRIMARY KEY ([CategoryId])
    )
    CREATE INDEX [IX_BudgetId] ON [dbo].[Categories]([BudgetId])
    CREATE INDEX [IX_InsertUserId] ON [dbo].[Categories]([InsertUserId])
    CREATE INDEX [IX_UpdateUserId] ON [dbo].[Categories]([UpdateUserId])
    CREATE TABLE [dbo].[Users] (
        [Id] [nvarchar](128) NOT NULL,
        [IsActive] [bit] NOT NULL,
        [InsertUserId] [nvarchar](128),
        [InsertTime] [datetime] NOT NULL,
        [UpdateUserId] [nvarchar](128),
        [UpdateTime] [datetime],
        [ActiveBudgetId] [int],
        [Email] [nvarchar](256),
        [EmailConfirmed] [bit] NOT NULL,
        [PasswordHash] [nvarchar](max),
        [SecurityStamp] [nvarchar](max),
        [PhoneNumber] [nvarchar](max),
        [PhoneNumberConfirmed] [bit] NOT NULL,
        [TwoFactorEnabled] [bit] NOT NULL,
        [LockoutEndDateUtc] [datetime],
        [LockoutEnabled] [bit] NOT NULL,
        [AccessFailedCount] [int] NOT NULL,
        [UserName] [nvarchar](256) NOT NULL,
        CONSTRAINT [PK_dbo.Users] PRIMARY KEY ([Id])
    )
    CREATE INDEX [IX_InsertUserId] ON [dbo].[Users]([InsertUserId])
    CREATE INDEX [IX_UpdateUserId] ON [dbo].[Users]([UpdateUserId])
    CREATE UNIQUE INDEX [UserNameIndex] ON [dbo].[Users]([UserName])
    CREATE TABLE [dbo].[AspNetUserClaims] (
        [Id] [int] NOT NULL IDENTITY,
        [UserId] [nvarchar](128) NOT NULL,
        [ClaimType] [nvarchar](max),
        [ClaimValue] [nvarchar](max),
        CONSTRAINT [PK_dbo.AspNetUserClaims] PRIMARY KEY ([Id])
    )
    CREATE INDEX [IX_UserId] ON [dbo].[AspNetUserClaims]([UserId])
    CREATE TABLE [dbo].[AspNetUserLogins] (
        [LoginProvider] [nvarchar](128) NOT NULL,
        [ProviderKey] [nvarchar](128) NOT NULL,
        [UserId] [nvarchar](128) NOT NULL,
        CONSTRAINT [PK_dbo.AspNetUserLogins] PRIMARY KEY ([LoginProvider], [ProviderKey], [UserId])
    )
    CREATE INDEX [IX_UserId] ON [dbo].[AspNetUserLogins]([UserId])
    CREATE TABLE [dbo].[AspNetUserRoles] (
        [UserId] [nvarchar](128) NOT NULL,
        [RoleId] [nvarchar](128) NOT NULL,
        CONSTRAINT [PK_dbo.AspNetUserRoles] PRIMARY KEY ([UserId], [RoleId])
    )
    CREATE INDEX [IX_UserId] ON [dbo].[AspNetUserRoles]([UserId])
    CREATE INDEX [IX_RoleId] ON [dbo].[AspNetUserRoles]([RoleId])
    CREATE TABLE [dbo].[Transactions] (
        [TransactionId] [int] NOT NULL IDENTITY,
        [Date] [datetime] NOT NULL,
        [Amount] [decimal](18, 2) NOT NULL,
        [Description] [nvarchar](max),
        [CategoryId] [int] NOT NULL,
        [SourceAccountId] [int] NOT NULL,
        [TargetAccountId] [int],
        [InsertUserId] [nvarchar](128) NOT NULL,
        [InsertTime] [datetime] NOT NULL,
        [UpdateUserId] [nvarchar](128),
        [UpdateTime] [datetime],
        [IsActive] [bit] NOT NULL,
        CONSTRAINT [PK_dbo.Transactions] PRIMARY KEY ([TransactionId])
    )
    CREATE INDEX [IX_CategoryId] ON [dbo].[Transactions]([CategoryId])
    CREATE INDEX [IX_SourceAccountId] ON [dbo].[Transactions]([SourceAccountId])
    CREATE INDEX [IX_TargetAccountId] ON [dbo].[Transactions]([TargetAccountId])
    CREATE INDEX [IX_InsertUserId] ON [dbo].[Transactions]([InsertUserId])
    CREATE INDEX [IX_UpdateUserId] ON [dbo].[Transactions]([UpdateUserId])
    CREATE TABLE [dbo].[BudgetUsers] (
        [BudgetUserId] [int] NOT NULL IDENTITY,
        [BudgetId] [int] NOT NULL,
        [UserId] [nvarchar](128) NOT NULL,
        [InsertUserId] [nvarchar](128) NOT NULL,
        [InsertTime] [datetime] NOT NULL,
        [UpdateUserId] [nvarchar](128),
        [UpdateTime] [datetime],
        [IsActive] [bit] NOT NULL,
        CONSTRAINT [PK_dbo.BudgetUsers] PRIMARY KEY ([BudgetUserId])
    )
    CREATE INDEX [IX_BudgetId] ON [dbo].[BudgetUsers]([BudgetId])
    CREATE INDEX [IX_UserId] ON [dbo].[BudgetUsers]([UserId])
    CREATE INDEX [IX_InsertUserId] ON [dbo].[BudgetUsers]([InsertUserId])
    CREATE INDEX [IX_UpdateUserId] ON [dbo].[BudgetUsers]([UpdateUserId])
    CREATE TABLE [dbo].[Currencies] (
        [CurrencyId] [int] NOT NULL,
        [CurrencyCode] [nvarchar](15) NOT NULL,
        [LongName] [nvarchar](150) NOT NULL,
        [DisplayName] [nvarchar](15) NOT NULL,
        [IsActive] [bit] NOT NULL,
        CONSTRAINT [PK_dbo.Currencies] PRIMARY KEY ([CurrencyId])
    )
    CREATE TABLE [dbo].[AspNetRoles] (
        [Id] [nvarchar](128) NOT NULL,
        [Name] [nvarchar](256) NOT NULL,
        CONSTRAINT [PK_dbo.AspNetRoles] PRIMARY KEY ([Id])
    )
    CREATE UNIQUE INDEX [RoleNameIndex] ON [dbo].[AspNetRoles]([Name])
    ALTER TABLE [dbo].[Accounts] ADD CONSTRAINT [FK_dbo.Accounts_dbo.AccountTypes_AccountTypeId] FOREIGN KEY ([AccountTypeId]) REFERENCES [dbo].[AccountTypes] ([AccountTypeId]) ON DELETE CASCADE
    ALTER TABLE [dbo].[Accounts] ADD CONSTRAINT [FK_dbo.Accounts_dbo.Budgets_BudgetId] FOREIGN KEY ([BudgetId]) REFERENCES [dbo].[Budgets] ([BudgetId])
    ALTER TABLE [dbo].[Accounts] ADD CONSTRAINT [FK_dbo.Accounts_dbo.Users_InsertUserId] FOREIGN KEY ([InsertUserId]) REFERENCES [dbo].[Users] ([Id])
    ALTER TABLE [dbo].[Accounts] ADD CONSTRAINT [FK_dbo.Accounts_dbo.Users_UpdateUserId] FOREIGN KEY ([UpdateUserId]) REFERENCES [dbo].[Users] ([Id])
    ALTER TABLE [dbo].[Budgets] ADD CONSTRAINT [FK_dbo.Budgets_dbo.Currencies_CurrencyId] FOREIGN KEY ([CurrencyId]) REFERENCES [dbo].[Currencies] ([CurrencyId]) ON DELETE CASCADE
    ALTER TABLE [dbo].[Budgets] ADD CONSTRAINT [FK_dbo.Budgets_dbo.Users_InsertUserId] FOREIGN KEY ([InsertUserId]) REFERENCES [dbo].[Users] ([Id])
    ALTER TABLE [dbo].[Budgets] ADD CONSTRAINT [FK_dbo.Budgets_dbo.Users_UpdateUserId] FOREIGN KEY ([UpdateUserId]) REFERENCES [dbo].[Users] ([Id])
    ALTER TABLE [dbo].[BudgetPlans] ADD CONSTRAINT [FK_dbo.BudgetPlans_dbo.Budgets_BudgetId] FOREIGN KEY ([BudgetId]) REFERENCES [dbo].[Budgets] ([BudgetId]) ON DELETE CASCADE
    ALTER TABLE [dbo].[BudgetPlans] ADD CONSTRAINT [FK_dbo.BudgetPlans_dbo.Users_InsertUserId] FOREIGN KEY ([InsertUserId]) REFERENCES [dbo].[Users] ([Id])
    ALTER TABLE [dbo].[BudgetPlans] ADD CONSTRAINT [FK_dbo.BudgetPlans_dbo.Users_UpdateUserId] FOREIGN KEY ([UpdateUserId]) REFERENCES [dbo].[Users] ([Id])
    ALTER TABLE [dbo].[BudgetPlanCategories] ADD CONSTRAINT [FK_dbo.BudgetPlanCategories_dbo.BudgetPlans_BudgetPlanId] FOREIGN KEY ([BudgetPlanId]) REFERENCES [dbo].[BudgetPlans] ([BudgetPlanId]) ON DELETE CASCADE
    ALTER TABLE [dbo].[BudgetPlanCategories] ADD CONSTRAINT [FK_dbo.BudgetPlanCategories_dbo.Categories_CategoryId] FOREIGN KEY ([CategoryId]) REFERENCES [dbo].[Categories] ([CategoryId]) ON DELETE CASCADE
    ALTER TABLE [dbo].[BudgetPlanCategories] ADD CONSTRAINT [FK_dbo.BudgetPlanCategories_dbo.Users_InsertUserId] FOREIGN KEY ([InsertUserId]) REFERENCES [dbo].[Users] ([Id])
    ALTER TABLE [dbo].[BudgetPlanCategories] ADD CONSTRAINT [FK_dbo.BudgetPlanCategories_dbo.Users_UpdateUserId] FOREIGN KEY ([UpdateUserId]) REFERENCES [dbo].[Users] ([Id])
    ALTER TABLE [dbo].[Categories] ADD CONSTRAINT [FK_dbo.Categories_dbo.Users_InsertUserId] FOREIGN KEY ([InsertUserId]) REFERENCES [dbo].[Users] ([Id])
    ALTER TABLE [dbo].[Categories] ADD CONSTRAINT [FK_dbo.Categories_dbo.Users_UpdateUserId] FOREIGN KEY ([UpdateUserId]) REFERENCES [dbo].[Users] ([Id])
    ALTER TABLE [dbo].[Categories] ADD CONSTRAINT [FK_dbo.Categories_dbo.Budgets_BudgetId] FOREIGN KEY ([BudgetId]) REFERENCES [dbo].[Budgets] ([BudgetId])
    ALTER TABLE [dbo].[Users] ADD CONSTRAINT [FK_dbo.Users_dbo.Users_InsertUserId] FOREIGN KEY ([InsertUserId]) REFERENCES [dbo].[Users] ([Id])
    ALTER TABLE [dbo].[Users] ADD CONSTRAINT [FK_dbo.Users_dbo.Users_UpdateUserId] FOREIGN KEY ([UpdateUserId]) REFERENCES [dbo].[Users] ([Id])
    ALTER TABLE [dbo].[AspNetUserClaims] ADD CONSTRAINT [FK_dbo.AspNetUserClaims_dbo.Users_UserId] FOREIGN KEY ([UserId]) REFERENCES [dbo].[Users] ([Id]) ON DELETE CASCADE
    ALTER TABLE [dbo].[AspNetUserLogins] ADD CONSTRAINT [FK_dbo.AspNetUserLogins_dbo.Users_UserId] FOREIGN KEY ([UserId]) REFERENCES [dbo].[Users] ([Id]) ON DELETE CASCADE
    ALTER TABLE [dbo].[AspNetUserRoles] ADD CONSTRAINT [FK_dbo.AspNetUserRoles_dbo.Users_UserId] FOREIGN KEY ([UserId]) REFERENCES [dbo].[Users] ([Id]) ON DELETE CASCADE
    ALTER TABLE [dbo].[AspNetUserRoles] ADD CONSTRAINT [FK_dbo.AspNetUserRoles_dbo.AspNetRoles_RoleId] FOREIGN KEY ([RoleId]) REFERENCES [dbo].[AspNetRoles] ([Id]) ON DELETE CASCADE
    ALTER TABLE [dbo].[Transactions] ADD CONSTRAINT [FK_dbo.Transactions_dbo.Users_InsertUserId] FOREIGN KEY ([InsertUserId]) REFERENCES [dbo].[Users] ([Id])
    ALTER TABLE [dbo].[Transactions] ADD CONSTRAINT [FK_dbo.Transactions_dbo.Users_UpdateUserId] FOREIGN KEY ([UpdateUserId]) REFERENCES [dbo].[Users] ([Id])
    ALTER TABLE [dbo].[Transactions] ADD CONSTRAINT [FK_dbo.Transactions_dbo.Categories_CategoryId] FOREIGN KEY ([CategoryId]) REFERENCES [dbo].[Categories] ([CategoryId])
    ALTER TABLE [dbo].[Transactions] ADD CONSTRAINT [FK_dbo.Transactions_dbo.Accounts_SourceAccountId] FOREIGN KEY ([SourceAccountId]) REFERENCES [dbo].[Accounts] ([AccountId]) ON DELETE CASCADE
    ALTER TABLE [dbo].[Transactions] ADD CONSTRAINT [FK_dbo.Transactions_dbo.Accounts_TargetAccountId] FOREIGN KEY ([TargetAccountId]) REFERENCES [dbo].[Accounts] ([AccountId])
    ALTER TABLE [dbo].[BudgetUsers] ADD CONSTRAINT [FK_dbo.BudgetUsers_dbo.Budgets_BudgetId] FOREIGN KEY ([BudgetId]) REFERENCES [dbo].[Budgets] ([BudgetId]) ON DELETE CASCADE
    ALTER TABLE [dbo].[BudgetUsers] ADD CONSTRAINT [FK_dbo.BudgetUsers_dbo.Users_InsertUserId] FOREIGN KEY ([InsertUserId]) REFERENCES [dbo].[Users] ([Id])
    ALTER TABLE [dbo].[BudgetUsers] ADD CONSTRAINT [FK_dbo.BudgetUsers_dbo.Users_UpdateUserId] FOREIGN KEY ([UpdateUserId]) REFERENCES [dbo].[Users] ([Id])
    ALTER TABLE [dbo].[BudgetUsers] ADD CONSTRAINT [FK_dbo.BudgetUsers_dbo.Users_UserId] FOREIGN KEY ([UserId]) REFERENCES [dbo].[Users] ([Id])
    CREATE TABLE [dbo].[__MigrationHistory] (
        [MigrationId] [nvarchar](150) NOT NULL,
        [ContextKey] [nvarchar](300) NOT NULL,
        [Model] [varbinary](max) NOT NULL,
        [ProductVersion] [nvarchar](32) NOT NULL,
        CONSTRAINT [PK_dbo.__MigrationHistory] PRIMARY KEY ([MigrationId], [ContextKey])
    )
    INSERT [dbo].[__MigrationHistory]([MigrationId], [ContextKey], [Model], [ProductVersion])
    VALUES (N'201905202050246_InitialCreate', N'ExpenseTracker.Persistence.Context.ExpenseTrackerContext',  
END

